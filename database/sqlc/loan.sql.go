// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: loan.sql

package db

import (
	"context"
	"time"
)

const createLoan = `-- name: CreateLoan :one
INSERT INTO loans (
  account_id,
  loan_amount,
  interest_rate,
  status,
  end_date
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, account_id, loan_amount, interest_rate, status, start_date, end_date
`

type CreateLoanParams struct {
	AccountID    int64     `json:"account_id"`
	LoanAmount   int64     `json:"loan_amount"`
	InterestRate int64     `json:"interest_rate"`
	Status       string    `json:"status"`
	EndDate      time.Time `json:"end_date"`
}

func (q *Queries) CreateLoan(ctx context.Context, arg CreateLoanParams) (Loan, error) {
	row := q.db.QueryRowContext(ctx, createLoan,
		arg.AccountID,
		arg.LoanAmount,
		arg.InterestRate,
		arg.Status,
		arg.EndDate,
	)
	var i Loan
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.LoanAmount,
		&i.InterestRate,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getLoan = `-- name: GetLoan :one
SELECT id, account_id, loan_amount, interest_rate, status, start_date, end_date FROM loans
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLoan(ctx context.Context, id int64) (Loan, error) {
	row := q.db.QueryRowContext(ctx, getLoan, id)
	var i Loan
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.LoanAmount,
		&i.InterestRate,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}
